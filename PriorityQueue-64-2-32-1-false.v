// Generated by CIRCT firtool-1.49.0
// VCS coverage exclude_file
module mem_31x78(
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [77:0] W0_data,
                W0_mask,
  output [77:0] R0_data
);

  reg [77:0] Memory[0:30];
  reg        _R0_en_d0;
  reg [4:0]  _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & W0_mask[0])
      Memory[W0_addr][32'h0 +: 1] <= W0_data[0];
    if (W0_en & W0_mask[1])
      Memory[W0_addr][32'h1 +: 1] <= W0_data[1];
    if (W0_en & W0_mask[2])
      Memory[W0_addr][32'h2 +: 1] <= W0_data[2];
    if (W0_en & W0_mask[3])
      Memory[W0_addr][32'h3 +: 1] <= W0_data[3];
    if (W0_en & W0_mask[4])
      Memory[W0_addr][32'h4 +: 1] <= W0_data[4];
    if (W0_en & W0_mask[5])
      Memory[W0_addr][32'h5 +: 1] <= W0_data[5];
    if (W0_en & W0_mask[6])
      Memory[W0_addr][32'h6 +: 1] <= W0_data[6];
    if (W0_en & W0_mask[7])
      Memory[W0_addr][32'h7 +: 1] <= W0_data[7];
    if (W0_en & W0_mask[8])
      Memory[W0_addr][32'h8 +: 1] <= W0_data[8];
    if (W0_en & W0_mask[9])
      Memory[W0_addr][32'h9 +: 1] <= W0_data[9];
    if (W0_en & W0_mask[10])
      Memory[W0_addr][32'hA +: 1] <= W0_data[10];
    if (W0_en & W0_mask[11])
      Memory[W0_addr][32'hB +: 1] <= W0_data[11];
    if (W0_en & W0_mask[12])
      Memory[W0_addr][32'hC +: 1] <= W0_data[12];
    if (W0_en & W0_mask[13])
      Memory[W0_addr][32'hD +: 1] <= W0_data[13];
    if (W0_en & W0_mask[14])
      Memory[W0_addr][32'hE +: 1] <= W0_data[14];
    if (W0_en & W0_mask[15])
      Memory[W0_addr][32'hF +: 1] <= W0_data[15];
    if (W0_en & W0_mask[16])
      Memory[W0_addr][32'h10 +: 1] <= W0_data[16];
    if (W0_en & W0_mask[17])
      Memory[W0_addr][32'h11 +: 1] <= W0_data[17];
    if (W0_en & W0_mask[18])
      Memory[W0_addr][32'h12 +: 1] <= W0_data[18];
    if (W0_en & W0_mask[19])
      Memory[W0_addr][32'h13 +: 1] <= W0_data[19];
    if (W0_en & W0_mask[20])
      Memory[W0_addr][32'h14 +: 1] <= W0_data[20];
    if (W0_en & W0_mask[21])
      Memory[W0_addr][32'h15 +: 1] <= W0_data[21];
    if (W0_en & W0_mask[22])
      Memory[W0_addr][32'h16 +: 1] <= W0_data[22];
    if (W0_en & W0_mask[23])
      Memory[W0_addr][32'h17 +: 1] <= W0_data[23];
    if (W0_en & W0_mask[24])
      Memory[W0_addr][32'h18 +: 1] <= W0_data[24];
    if (W0_en & W0_mask[25])
      Memory[W0_addr][32'h19 +: 1] <= W0_data[25];
    if (W0_en & W0_mask[26])
      Memory[W0_addr][32'h1A +: 1] <= W0_data[26];
    if (W0_en & W0_mask[27])
      Memory[W0_addr][32'h1B +: 1] <= W0_data[27];
    if (W0_en & W0_mask[28])
      Memory[W0_addr][32'h1C +: 1] <= W0_data[28];
    if (W0_en & W0_mask[29])
      Memory[W0_addr][32'h1D +: 1] <= W0_data[29];
    if (W0_en & W0_mask[30])
      Memory[W0_addr][32'h1E +: 1] <= W0_data[30];
    if (W0_en & W0_mask[31])
      Memory[W0_addr][32'h1F +: 1] <= W0_data[31];
    if (W0_en & W0_mask[32])
      Memory[W0_addr][32'h20 +: 1] <= W0_data[32];
    if (W0_en & W0_mask[33])
      Memory[W0_addr][32'h21 +: 1] <= W0_data[33];
    if (W0_en & W0_mask[34])
      Memory[W0_addr][32'h22 +: 1] <= W0_data[34];
    if (W0_en & W0_mask[35])
      Memory[W0_addr][32'h23 +: 1] <= W0_data[35];
    if (W0_en & W0_mask[36])
      Memory[W0_addr][32'h24 +: 1] <= W0_data[36];
    if (W0_en & W0_mask[37])
      Memory[W0_addr][32'h25 +: 1] <= W0_data[37];
    if (W0_en & W0_mask[38])
      Memory[W0_addr][32'h26 +: 1] <= W0_data[38];
    if (W0_en & W0_mask[39])
      Memory[W0_addr][32'h27 +: 1] <= W0_data[39];
    if (W0_en & W0_mask[40])
      Memory[W0_addr][32'h28 +: 1] <= W0_data[40];
    if (W0_en & W0_mask[41])
      Memory[W0_addr][32'h29 +: 1] <= W0_data[41];
    if (W0_en & W0_mask[42])
      Memory[W0_addr][32'h2A +: 1] <= W0_data[42];
    if (W0_en & W0_mask[43])
      Memory[W0_addr][32'h2B +: 1] <= W0_data[43];
    if (W0_en & W0_mask[44])
      Memory[W0_addr][32'h2C +: 1] <= W0_data[44];
    if (W0_en & W0_mask[45])
      Memory[W0_addr][32'h2D +: 1] <= W0_data[45];
    if (W0_en & W0_mask[46])
      Memory[W0_addr][32'h2E +: 1] <= W0_data[46];
    if (W0_en & W0_mask[47])
      Memory[W0_addr][32'h2F +: 1] <= W0_data[47];
    if (W0_en & W0_mask[48])
      Memory[W0_addr][32'h30 +: 1] <= W0_data[48];
    if (W0_en & W0_mask[49])
      Memory[W0_addr][32'h31 +: 1] <= W0_data[49];
    if (W0_en & W0_mask[50])
      Memory[W0_addr][32'h32 +: 1] <= W0_data[50];
    if (W0_en & W0_mask[51])
      Memory[W0_addr][32'h33 +: 1] <= W0_data[51];
    if (W0_en & W0_mask[52])
      Memory[W0_addr][32'h34 +: 1] <= W0_data[52];
    if (W0_en & W0_mask[53])
      Memory[W0_addr][32'h35 +: 1] <= W0_data[53];
    if (W0_en & W0_mask[54])
      Memory[W0_addr][32'h36 +: 1] <= W0_data[54];
    if (W0_en & W0_mask[55])
      Memory[W0_addr][32'h37 +: 1] <= W0_data[55];
    if (W0_en & W0_mask[56])
      Memory[W0_addr][32'h38 +: 1] <= W0_data[56];
    if (W0_en & W0_mask[57])
      Memory[W0_addr][32'h39 +: 1] <= W0_data[57];
    if (W0_en & W0_mask[58])
      Memory[W0_addr][32'h3A +: 1] <= W0_data[58];
    if (W0_en & W0_mask[59])
      Memory[W0_addr][32'h3B +: 1] <= W0_data[59];
    if (W0_en & W0_mask[60])
      Memory[W0_addr][32'h3C +: 1] <= W0_data[60];
    if (W0_en & W0_mask[61])
      Memory[W0_addr][32'h3D +: 1] <= W0_data[61];
    if (W0_en & W0_mask[62])
      Memory[W0_addr][32'h3E +: 1] <= W0_data[62];
    if (W0_en & W0_mask[63])
      Memory[W0_addr][32'h3F +: 1] <= W0_data[63];
    if (W0_en & W0_mask[64])
      Memory[W0_addr][32'h40 +: 1] <= W0_data[64];
    if (W0_en & W0_mask[65])
      Memory[W0_addr][32'h41 +: 1] <= W0_data[65];
    if (W0_en & W0_mask[66])
      Memory[W0_addr][32'h42 +: 1] <= W0_data[66];
    if (W0_en & W0_mask[67])
      Memory[W0_addr][32'h43 +: 1] <= W0_data[67];
    if (W0_en & W0_mask[68])
      Memory[W0_addr][32'h44 +: 1] <= W0_data[68];
    if (W0_en & W0_mask[69])
      Memory[W0_addr][32'h45 +: 1] <= W0_data[69];
    if (W0_en & W0_mask[70])
      Memory[W0_addr][32'h46 +: 1] <= W0_data[70];
    if (W0_en & W0_mask[71])
      Memory[W0_addr][32'h47 +: 1] <= W0_data[71];
    if (W0_en & W0_mask[72])
      Memory[W0_addr][32'h48 +: 1] <= W0_data[72];
    if (W0_en & W0_mask[73])
      Memory[W0_addr][32'h49 +: 1] <= W0_data[73];
    if (W0_en & W0_mask[74])
      Memory[W0_addr][32'h4A +: 1] <= W0_data[74];
    if (W0_en & W0_mask[75])
      Memory[W0_addr][32'h4B +: 1] <= W0_data[75];
    if (W0_en & W0_mask[76])
      Memory[W0_addr][32'h4C +: 1] <= W0_data[76];
    if (W0_en & W0_mask[77])
      Memory[W0_addr][32'h4D +: 1] <= W0_data[77];
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 78'bx;
endmodule

module linearSearchMem(
  input         clock,
                reset,
  input  [4:0]  rd_address,
                wr_address,
  input  [1:0]  wr_mask,
  input  [31:0] wr_data_0_event_superCycle,
  input  [6:0]  wr_data_0_id,
  input  [31:0] wr_data_1_event_superCycle,
  input  [6:0]  wr_data_1_id,
  input         wr_write,
  input  [6:0]  srch_refID,
                srch_heapSize,
  input         srch_search,
  output [31:0] rd_data_0_event_superCycle,
  output [6:0]  rd_data_0_id,
  output [31:0] rd_data_1_event_superCycle,
  output [6:0]  rd_data_1_id,
  output [5:0]  srch_res,
  output        srch_error,
                srch_done
);

  wire            wrMask_1;
  wire            wrMask_0;
  wire [6:0]      wrData_1_id;
  wire [31:0]     wrData_1_event_superCycle;
  wire [6:0]      wrData_0_id;
  wire [31:0]     wrData_0_event_superCycle;
  wire [77:0]     _mem_ext_R0_data;
  reg  [4:0]      REG;
  reg  [1:0]      stateReg;
  reg  [5:0]      pointerReg;
  reg             errorFlag;
  wire            _GEN = stateReg == 2'h2;
  assign wrData_0_event_superCycle = _GEN ? 32'hFFFFFFFF : wr_data_0_event_superCycle;
  assign wrData_0_id = _GEN ? 7'h7F : wr_data_0_id;
  assign wrData_1_event_superCycle = _GEN ? 32'hFFFFFFFF : wr_data_1_event_superCycle;
  assign wrData_1_id = _GEN ? 7'h7F : wr_data_1_id;
  assign wrMask_0 = _GEN | wr_mask[0];
  assign wrMask_1 = _GEN | wr_mask[1];
  wire [5:0]      _pointerReg_T_2 = pointerReg + 6'h1;
  wire [3:0][4:0] _GEN_0 =
    {{rd_address},
     {rd_address},
     {_pointerReg_T_2[4:0]},
     {srch_search ? 5'h0 : rd_address}};
  always @(posedge clock) begin
    if (_GEN)
      REG <= pointerReg[4:0];
    else
      REG <= wr_address;
    if (reset) begin
      stateReg <= 2'h2;
      pointerReg <= 6'h0;
      errorFlag <= 1'h0;
    end
    else begin
      automatic logic            resVec_0 = _mem_ext_R0_data[38:32] == srch_refID;
      automatic logic            resVec_1 = _mem_ext_R0_data[77:71] == srch_refID;
      automatic logic            _GEN_1 = (|{resVec_1, resVec_0}) | ~srch_search;
      automatic logic [6:0]      _lastAddr_T_1 = srch_heapSize - 7'h1;
      automatic logic            _GEN_2 =
        pointerReg >= (srch_heapSize == 7'h0 ? 6'h0 : _lastAddr_T_1[6:1]);
      automatic logic [3:0][1:0] _GEN_3 =
        {{stateReg},
         {{pointerReg != 6'h21, 1'h0}},
         {{1'h0, ~(_GEN_1 | _GEN_2)}},
         {{1'h0, srch_search}}};
      automatic logic [3:0][5:0] _GEN_4 =
        {{pointerReg},
         {pointerReg + 6'h1},
         {_GEN_1
            ? {pointerReg[4:0], 1'h0} + {5'h0, ~resVec_0 & resVec_1} + 6'h1
            : _pointerReg_T_2},
         {srch_search ? 6'h0 : pointerReg}};
      automatic logic [3:0]      _GEN_5 =
        {{errorFlag}, {errorFlag}, {~_GEN_1 & _GEN_2}, {~srch_search & errorFlag}};
      stateReg <= _GEN_3[stateReg];
      pointerReg <= _GEN_4[stateReg];
      errorFlag <= _GEN_5[stateReg];
    end
  end // always @(posedge)
  mem_31x78 mem_ext (
    .R0_addr (_GEN_0[stateReg]),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (REG),
    .W0_en   (_GEN | wr_write),
    .W0_clk  (clock),
    .W0_data
      ({wrData_1_id, wrData_1_event_superCycle, wrData_0_id, wrData_0_event_superCycle}),
    .W0_mask ({{39{wrMask_1}}, {39{wrMask_0}}}),
    .R0_data (_mem_ext_R0_data)
  );
  assign rd_data_0_event_superCycle = _mem_ext_R0_data[31:0];
  assign rd_data_0_id = _mem_ext_R0_data[38:32];
  assign rd_data_1_event_superCycle = _mem_ext_R0_data[70:39];
  assign rd_data_1_id = _mem_ext_R0_data[77:71];
  assign srch_res = pointerReg;
  assign srch_error = errorFlag;
  assign srch_done = ~_GEN & (stateReg == 2'h0 | stateReg != 2'h1);
endmodule

module MinFinder(
  input  [31:0] io_values_0_event_superCycle,
  input  [6:0]  io_values_0_id,
  input  [31:0] io_values_1_event_superCycle,
  input  [6:0]  io_values_1_id,
  input  [31:0] io_values_2_event_superCycle,
  input  [6:0]  io_values_2_id,
  output [31:0] io_res_event_superCycle,
  output [6:0]  io_res_id,
  output [1:0]  io_index
);

  wire        selectLeft =
    io_values_0_event_superCycle < io_values_1_event_superCycle
    | io_values_0_event_superCycle == io_values_1_event_superCycle;
  wire [31:0] _GEN =
    selectLeft ? io_values_0_event_superCycle : io_values_1_event_superCycle;
  wire        selectLeft_1 =
    _GEN < io_values_2_event_superCycle | _GEN == io_values_2_event_superCycle;
  assign io_res_event_superCycle = selectLeft_1 ? _GEN : io_values_2_event_superCycle;
  assign io_res_id =
    selectLeft_1 ? (selectLeft ? io_values_0_id : io_values_1_id) : io_values_2_id;
  assign io_index = selectLeft_1 ? {1'h0, ~selectLeft} : 2'h2;
endmodule

module Heapifier(
  input         clock,
                reset,
                io_control_heapifyUp,
                io_control_heapifyDown,
  input  [5:0]  io_control_idx,
  input  [6:0]  io_control_heapSize,
  input  [31:0] io_rdPort_data_0_event_superCycle,
  input  [6:0]  io_rdPort_data_0_id,
  input  [31:0] io_rdPort_data_1_event_superCycle,
  input  [6:0]  io_rdPort_data_1_id,
  input  [31:0] io_headPort_rdData_event_superCycle,
  input  [6:0]  io_headPort_rdData_id,
  output        io_control_done,
                io_control_swapped,
  output [4:0]  io_rdPort_address,
                io_wrPort_address,
  output [31:0] io_wrPort_data_0_event_superCycle,
  output [6:0]  io_wrPort_data_0_id,
  output [31:0] io_wrPort_data_1_event_superCycle,
  output [6:0]  io_wrPort_data_1_id,
  output        io_wrPort_write,
  output [31:0] io_headPort_wrData_event_superCycle,
  output [6:0]  io_headPort_wrData_id,
  output        io_headPort_write
);

  wire [5:0]  addressIndex;
  wire [31:0] _minFinder_io_res_event_superCycle;
  wire [6:0]  _minFinder_io_res_id;
  wire [1:0]  _minFinder_io_index;
  reg  [3:0]  stateReg;
  reg  [5:0]  indexReg;
  reg         swappedReg;
  reg  [31:0] parentReg_0_event_superCycle;
  reg  [6:0]  parentReg_0_id;
  reg  [31:0] parentReg_1_event_superCycle;
  reg  [6:0]  parentReg_1_id;
  reg  [31:0] childrenReg_0_event_superCycle;
  reg  [6:0]  childrenReg_0_id;
  reg  [31:0] childrenReg_1_event_superCycle;
  reg  [6:0]  childrenReg_1_id;
  wire [5:0]  _ramAddressParent_T = addressIndex - 6'h1;
  wire        parentOffset = (|indexReg) & indexReg[0] - 1'h1;
  wire [31:0] _GEN =
    parentOffset ? parentReg_1_event_superCycle : parentReg_0_event_superCycle;
  wire [6:0]  _GEN_0 = parentOffset ? parentReg_1_id : parentReg_0_id;
  wire [5:0]  _nextIndexUp_T = indexReg - 6'h1;
  reg  [1:0]  nextIndexDown_REG;
  wire [6:0]  _nextIndexDown_T_1 = {indexReg, 1'h0} + {5'h0, nextIndexDown_REG};
  wire        _GEN_1 = stateReg == 4'h0;
  wire        _GEN_2 = stateReg == 4'h1;
  wire        _GEN_3 = stateReg == 4'h3;
  wire        _GEN_4 = stateReg == 4'h5;
  wire        _GEN_5 = stateReg == 4'h7;
  wire        _GEN_6 = stateReg == 4'h9;
  wire [5:0]  _GEN_7 = {1'h0, _nextIndexUp_T[5:1]};
  wire        _GEN_8 = stateReg == 4'h2;
  wire        _GEN_9 = stateReg == 4'h4;
  wire        _GEN_10 = stateReg == 4'h6;
  wire        _GEN_11 = stateReg == 4'h8;
  wire        _GEN_12 = _GEN_8 | _GEN_9 | _GEN_10;
  wire        _GEN_13 = _GEN_2 | _GEN_3 | _GEN_4;
  wire        _GEN_14 = stateReg == 4'hA;
  wire        _GEN_15 = _GEN_10 | _GEN_11;
  wire        _GEN_16 = _GEN_8 | _GEN_9 | _GEN_15 | ~_GEN_14;
  wire        _GEN_17 = _GEN_4 | _GEN_5;
  wire        _GEN_18 = _GEN_2 | _GEN_3 | _GEN_17;
  assign addressIndex =
    _GEN_1 | _GEN_18
      ? indexReg
      : _GEN_6 ? _GEN_7 : _GEN_16 ? indexReg : _nextIndexDown_T_1[5:0];
  wire        _GEN_19 = _minFinder_io_index[0] - 1'h1;
  wire        _GEN_20 = (|_minFinder_io_index) & ~_GEN_19;
  wire        _GEN_21 = (|_minFinder_io_index) & _GEN_19;
  wire        _GEN_22 = (|_minFinder_io_index) & ~(|indexReg);
  wire        _GEN_23 = (|_minFinder_io_index) & (|indexReg);
  wire [31:0] _GEN_24 =
    _GEN_23
      ? (parentOffset ? parentReg_0_event_superCycle : _minFinder_io_res_event_superCycle)
      : childrenReg_0_event_superCycle;
  wire [6:0]  _GEN_25 =
    _GEN_23 ? (parentOffset ? parentReg_0_id : _minFinder_io_res_id) : childrenReg_0_id;
  wire [31:0] _GEN_26 =
    _GEN_23
      ? (parentOffset ? _minFinder_io_res_event_superCycle : parentReg_1_event_superCycle)
      : childrenReg_1_event_superCycle;
  wire [6:0]  _GEN_27 =
    _GEN_23 ? (parentOffset ? _minFinder_io_res_id : parentReg_1_id) : childrenReg_1_id;
  wire        _GEN_28 = _GEN_8 | _GEN_9;
  wire        _GEN_29 = _GEN_2 | _GEN_3;
  wire        _GEN_30 = _GEN_12 | ~(_GEN_11 & _GEN_22);
  wire        _GEN_31 = _GEN_15 | ~_GEN_14;
  wire        _GEN_32 = _GEN_6 | _GEN_8;
  wire        _GEN_33 = _GEN_14 & _GEN_20;
  wire        _GEN_34 = _GEN_14 & _GEN_21;
  always @(posedge clock) begin
    if (reset) begin
      stateReg <= 4'h0;
      indexReg <= 6'h0;
      swappedReg <= 1'h0;
      parentReg_0_event_superCycle <= 32'h0;
      parentReg_0_id <= 7'h0;
      parentReg_1_event_superCycle <= 32'h0;
      parentReg_1_id <= 7'h0;
      childrenReg_0_event_superCycle <= 32'h0;
      childrenReg_0_id <= 7'h0;
      childrenReg_1_event_superCycle <= 32'h0;
      childrenReg_1_id <= 7'h0;
    end
    else begin
      automatic logic [15:0][3:0] _GEN_35 =
        {{stateReg},
         {stateReg},
         {stateReg},
         {stateReg},
         {stateReg},
         {{_nextIndexDown_T_1, 1'h0} >= {1'h0, io_control_heapSize} ? 4'h0 : 4'h6},
         {(|indexReg) ? 4'h5 : 4'h0},
         {(|_minFinder_io_index) ? 4'hA : 4'h0},
         {(|_minFinder_io_index) ? 4'h9 : 4'h0},
         {4'h8},
         {4'h7},
         {4'h6},
         {4'h5},
         {4'h4},
         {4'h3},
         {io_control_heapifyUp ? 4'h1 : {2'h0, io_control_heapifyDown, 1'h0}}};
      stateReg <= _GEN_35[stateReg];
      if (_GEN_1) begin
        indexReg <= io_control_idx;
        swappedReg <= ~(io_control_heapifyUp | io_control_heapifyDown) & swappedReg;
      end
      else begin
        if (~_GEN_18) begin
          if (_GEN_6)
            indexReg <= _GEN_7;
          else if (_GEN_16) begin
          end
          else
            indexReg <= _nextIndexDown_T_1[5:0];
        end
        if (~_GEN_13) begin
          if (_GEN_5)
            swappedReg <= (|_minFinder_io_index) | swappedReg;
          else
            swappedReg <=
              ~(_GEN_6 | _GEN_12) & _GEN_11 & (|_minFinder_io_index) | swappedReg;
        end
      end
      if (~_GEN_29) begin
        if (_GEN_4) begin
          if (|indexReg) begin
            parentReg_0_event_superCycle <= io_rdPort_data_0_event_superCycle;
            parentReg_0_id <= io_rdPort_data_0_id;
            parentReg_1_event_superCycle <= io_rdPort_data_1_event_superCycle;
            parentReg_1_id <= io_rdPort_data_1_id;
          end
          else begin
            parentReg_0_event_superCycle <= io_headPort_rdData_event_superCycle;
            parentReg_0_id <= io_headPort_rdData_id;
          end
        end
        else if (~(_GEN_5 | _GEN_32)) begin
          if (_GEN_9) begin
            if (|indexReg) begin
              parentReg_0_event_superCycle <= io_rdPort_data_0_event_superCycle;
              parentReg_0_id <= io_rdPort_data_0_id;
              parentReg_1_event_superCycle <= io_rdPort_data_1_event_superCycle;
              parentReg_1_id <= io_rdPort_data_1_id;
            end
            else begin
              parentReg_0_event_superCycle <= io_headPort_rdData_event_superCycle;
              parentReg_0_id <= io_headPort_rdData_id;
            end
          end
          else if (_GEN_31) begin
          end
          else if (_GEN_19) begin
            parentReg_0_event_superCycle <= childrenReg_0_event_superCycle;
            parentReg_0_id <= childrenReg_0_id;
            if (parentOffset) begin
            end
            else begin
              parentReg_1_event_superCycle <= parentReg_0_event_superCycle;
              parentReg_1_id <= parentReg_0_id;
            end
          end
          else begin
            if (parentOffset) begin
              parentReg_0_event_superCycle <= parentReg_1_event_superCycle;
              parentReg_0_id <= parentReg_1_id;
            end
            parentReg_1_event_superCycle <= childrenReg_1_event_superCycle;
            parentReg_1_id <= childrenReg_1_id;
          end
        end
      end
      if (~_GEN_2) begin
        if (_GEN_3) begin
          childrenReg_0_event_superCycle <= io_rdPort_data_0_event_superCycle;
          childrenReg_0_id <= io_rdPort_data_0_id;
          childrenReg_1_event_superCycle <= io_rdPort_data_1_event_superCycle;
          childrenReg_1_id <= io_rdPort_data_1_id;
        end
        else if (~_GEN_17) begin
          if (_GEN_6) begin
            if (parentOffset) begin
              childrenReg_0_event_superCycle <= parentReg_0_event_superCycle;
              childrenReg_0_id <= parentReg_0_id;
              childrenReg_1_event_superCycle <= _minFinder_io_res_event_superCycle;
              childrenReg_1_id <= _minFinder_io_res_id;
            end
            else begin
              childrenReg_0_event_superCycle <= _minFinder_io_res_event_superCycle;
              childrenReg_0_id <= _minFinder_io_res_id;
              childrenReg_1_event_superCycle <= parentReg_1_event_superCycle;
              childrenReg_1_id <= parentReg_1_id;
            end
          end
          else if (_GEN_28 | ~_GEN_10) begin
          end
          else begin
            childrenReg_0_event_superCycle <= io_rdPort_data_0_event_superCycle;
            childrenReg_0_id <= io_rdPort_data_0_id;
            childrenReg_1_event_superCycle <= io_rdPort_data_1_event_superCycle;
            childrenReg_1_id <= io_rdPort_data_1_id;
          end
        end
      end
    end
    nextIndexDown_REG <= _minFinder_io_index;
  end // always @(posedge)
  MinFinder minFinder (
    .io_values_0_event_superCycle (_GEN),
    .io_values_0_id               (_GEN_0),
    .io_values_1_event_superCycle (childrenReg_0_event_superCycle),
    .io_values_1_id               (childrenReg_0_id),
    .io_values_2_event_superCycle (childrenReg_1_event_superCycle),
    .io_values_2_id               (childrenReg_1_id),
    .io_res_event_superCycle      (_minFinder_io_res_event_superCycle),
    .io_res_id                    (_minFinder_io_res_id),
    .io_index                     (_minFinder_io_index)
  );
  assign io_control_done = _GEN_1;
  assign io_control_swapped = swappedReg;
  assign io_rdPort_address =
    _GEN_2
      ? addressIndex[4:0]
      : _GEN_3
          ? _ramAddressParent_T[5:1]
          : _GEN_17
              ? 5'h0
              : _GEN_32
                  ? _ramAddressParent_T[5:1]
                  : _GEN_9 | ~_GEN_31 ? addressIndex[4:0] : 5'h0;
  assign io_wrPort_address =
    _GEN_29
      ? 5'h0
      : _GEN_4
          ? addressIndex[4:0]
          : _GEN_5
              ? _ramAddressParent_T[5:1]
              : _GEN_6 | _GEN_28
                  ? 5'h0
                  : _GEN_10
                      ? _ramAddressParent_T[5:1]
                      : _GEN_11 ? addressIndex[4:0] : 5'h0;
  assign io_wrPort_data_0_event_superCycle =
    _GEN_13
      ? childrenReg_0_event_superCycle
      : _GEN_5
          ? (_GEN_20 ? _GEN : childrenReg_0_event_superCycle)
          : _GEN_6
              ? _GEN_24
              : _GEN_12
                  ? childrenReg_0_event_superCycle
                  : _GEN_11 ? _GEN_24 : _GEN_33 ? _GEN : childrenReg_0_event_superCycle;
  assign io_wrPort_data_0_id =
    _GEN_13
      ? childrenReg_0_id
      : _GEN_5
          ? (_GEN_20 ? _GEN_0 : childrenReg_0_id)
          : _GEN_6
              ? _GEN_25
              : _GEN_12
                  ? childrenReg_0_id
                  : _GEN_11 ? _GEN_25 : _GEN_33 ? _GEN_0 : childrenReg_0_id;
  assign io_wrPort_data_1_event_superCycle =
    _GEN_13
      ? childrenReg_1_event_superCycle
      : _GEN_5
          ? (_GEN_21 ? _GEN : childrenReg_1_event_superCycle)
          : _GEN_6
              ? _GEN_26
              : _GEN_12
                  ? childrenReg_1_event_superCycle
                  : _GEN_11 ? _GEN_26 : _GEN_34 ? _GEN : childrenReg_1_event_superCycle;
  assign io_wrPort_data_1_id =
    _GEN_13
      ? childrenReg_1_id
      : _GEN_5
          ? (_GEN_21 ? _GEN_0 : childrenReg_1_id)
          : _GEN_6
              ? _GEN_27
              : _GEN_12
                  ? childrenReg_1_id
                  : _GEN_11 ? _GEN_27 : _GEN_34 ? _GEN_0 : childrenReg_1_id;
  assign io_wrPort_write =
    ~_GEN_13
    & (_GEN_5
         ? (|_minFinder_io_index)
         : _GEN_6
             ? _GEN_23
             : ~_GEN_12 & (_GEN_11 ? _GEN_23 : _GEN_14 & (|_minFinder_io_index)));
  assign io_headPort_wrData_event_superCycle =
    _GEN_18
      ? parentReg_0_event_superCycle
      : _GEN_6
          ? (_GEN_22 ? _minFinder_io_res_event_superCycle : parentReg_0_event_superCycle)
          : _GEN_30 ? parentReg_0_event_superCycle : _minFinder_io_res_event_superCycle;
  assign io_headPort_wrData_id =
    _GEN_18
      ? parentReg_0_id
      : _GEN_6
          ? (_GEN_22 ? _minFinder_io_res_id : parentReg_0_id)
          : _GEN_30 ? parentReg_0_id : _minFinder_io_res_id;
  assign io_headPort_write =
    ~_GEN_18
    & (_GEN_6
         ? (|_minFinder_io_index) & ~(|indexReg)
         : ~_GEN_12 & _GEN_11 & (|_minFinder_io_index) & ~(|indexReg));
endmodule

module QueueControl(
  input         clock,
                reset,
                io_cmd_valid,
                io_cmd_op,
  input  [31:0] io_cmd_prio_superCycle,
  input  [6:0]  io_cmd_refID,
  input  [31:0] io_rdPort_data_0_event_superCycle,
  input  [6:0]  io_rdPort_data_0_id,
  input  [31:0] io_rdPort_data_1_event_superCycle,
  input  [6:0]  io_rdPort_data_1_id,
  input  [5:0]  io_srch_res,
  input         io_srch_error,
                io_srch_done,
  output        io_head_valid,
                io_head_none,
  output [31:0] io_head_prio_superCycle,
  output [6:0]  io_head_refID,
  output        io_cmd_done,
                io_cmd_result,
  output [31:0] io_cmd_rm_prio_superCycle,
  output [4:0]  io_rdPort_address,
                io_wrPort_address,
  output [1:0]  io_wrPort_mask,
  output [31:0] io_wrPort_data_0_event_superCycle,
  output [6:0]  io_wrPort_data_0_id,
  output [31:0] io_wrPort_data_1_event_superCycle,
  output [6:0]  io_wrPort_data_1_id,
  output        io_wrPort_write,
  output [6:0]  io_srch_refID,
                io_srch_heapSize,
  output        io_srch_search
);

  wire [5:0]       rdIndex;
  wire [5:0]       wrIndex;
  wire             _heapifier_io_control_done;
  wire             _heapifier_io_control_swapped;
  wire [4:0]       _heapifier_io_rdPort_address;
  wire [4:0]       _heapifier_io_wrPort_address;
  wire [31:0]      _heapifier_io_wrPort_data_0_event_superCycle;
  wire [6:0]       _heapifier_io_wrPort_data_0_id;
  wire [31:0]      _heapifier_io_wrPort_data_1_event_superCycle;
  wire [6:0]       _heapifier_io_wrPort_data_1_id;
  wire             _heapifier_io_wrPort_write;
  wire [31:0]      _heapifier_io_headPort_wrData_event_superCycle;
  wire [6:0]       _heapifier_io_headPort_wrData_id;
  wire             _heapifier_io_headPort_write;
  reg  [3:0]       stateReg;
  reg  [6:0]       heapSizeReg;
  reg  [31:0]      headReg_event_superCycle;
  reg  [6:0]       headReg_id;
  reg  [31:0]      tempReg_0_event_superCycle;
  reg  [6:0]       tempReg_0_id;
  reg  [31:0]      tempReg_1_event_superCycle;
  reg  [6:0]       tempReg_1_id;
  reg  [5:0]       removalIndex;
  reg  [31:0]      removedPrio_superCycle;
  reg              headValid;
  reg              errorReg;
  wire [5:0]       _wrIndexToRam_T = wrIndex - 6'h1;
  wire             wrIndexOffset = (|wrIndex) & wrIndex[0] - 1'h1;
  wire [5:0]       _rdIndexToRam_T = rdIndex - 6'h1;
  wire             rdIndexOffset = (|rdIndex) & rdIndex[0] - 1'h1;
  wire [6:0]       _heapifier_io_control_idx_T_1 = heapSizeReg - 7'h1;
  wire             _GEN = stateReg == 4'h0;
  wire             _GEN_0 = stateReg == 4'h1;
  wire             _GEN_1 = stateReg == 4'h2;
  wire [1:0]       _GEN_2 = {1'h0, wrIndexOffset};
  wire             _GEN_3 = stateReg == 4'h3;
  wire             _GEN_4 = _GEN_0 | _GEN_1;
  wire             _GEN_5 = _GEN | _GEN_4;
  wire             _GEN_6 = stateReg == 4'h4;
  wire             _GEN_7 = _GEN_0 | _GEN_1 | _GEN_3;
  wire             _GEN_8 = stateReg == 4'h5;
  wire [31:0]      _GEN_9 =
    rdIndexOffset ? _heapifier_io_wrPort_data_0_event_superCycle : 32'hFFFFFFFF;
  wire [6:0]       _GEN_10 = rdIndexOffset ? _heapifier_io_wrPort_data_0_id : 7'h7F;
  wire [31:0]      _GEN_11 =
    rdIndexOffset ? 32'hFFFFFFFF : _heapifier_io_wrPort_data_1_event_superCycle;
  wire [6:0]       _GEN_12 = rdIndexOffset ? 7'h7F : _heapifier_io_wrPort_data_1_id;
  wire [1:0]       _GEN_13 = {1'h0, rdIndexOffset};
  wire             _GEN_14 = stateReg == 4'h6;
  wire             _GEN_15 = stateReg == 4'h7;
  wire [31:0]      _GEN_16 =
    rdIndexOffset ? tempReg_1_event_superCycle : tempReg_0_event_superCycle;
  wire [6:0]       _GEN_17 = rdIndexOffset ? tempReg_1_id : tempReg_0_id;
  wire             _GEN_18 = _GEN_3 | _GEN_6 | _GEN_8 | _GEN_14;
  wire             _GEN_19 = _GEN_1 | _GEN_18;
  wire             _GEN_20 = stateReg == 4'h8;
  wire             _GEN_21 = stateReg == 4'h9;
  wire [15:0][5:0] _GEN_22 =
    {{6'h0},
     {6'h0},
     {6'h0},
     {6'h0},
     {6'h0},
     {6'h0},
     {removalIndex},
     {heapSizeReg[5:0]},
     {removalIndex},
     {6'h0},
     {removalIndex},
     {heapSizeReg[5:0]},
     {_heapifier_io_control_idx_T_1[5:0]},
     {heapSizeReg[5:0]},
     {6'h0},
     {heapSizeReg[5:0]}};
  assign wrIndex = _GEN_22[stateReg];
  assign rdIndex =
    _GEN
      ? _heapifier_io_control_idx_T_1[5:0]
      : _GEN_4
          ? 6'h0
          : _GEN_3
              ? _heapifier_io_control_idx_T_1[5:0]
              : _GEN_6
                  ? io_srch_res
                  : _GEN_8 | ~(_GEN_14 | ~(_GEN_15 | ~(_GEN_20 | ~_GEN_21)))
                      ? heapSizeReg[5:0]
                      : 6'h0;
  wire             _GEN_23 = _GEN_21 & ~wrIndexOffset;
  wire             _GEN_24 = _GEN_3 | _GEN_6;
  wire             _GEN_25 = _GEN | _GEN_0;
  wire             _GEN_26 = _GEN_21 & wrIndexOffset;
  wire             _GEN_27 = _GEN_20 | _GEN_21;
  wire [5:0]       _heapifier_io_control_idx_T_6 = removalIndex - 6'h1;
  wire             _GEN_28 = stateReg == 4'hA;
  wire [6:0]       _GEN_29 = {removalIndex, 1'h0} + 7'h1;
  wire             _GEN_30 = ~io_cmd_op & ~_heapifier_io_control_swapped & ~(_GEN_29[6]);
  always @(posedge clock) begin
    if (reset) begin
      stateReg <= 4'h0;
      heapSizeReg <= 7'h0;
      headReg_event_superCycle <= 32'hFFFFFFFF;
      headReg_id <= 7'h7F;
      tempReg_0_event_superCycle <= 32'h0;
      tempReg_0_id <= 7'h0;
      tempReg_1_event_superCycle <= 32'h0;
      tempReg_1_id <= 7'h0;
      removalIndex <= 6'h0;
      removedPrio_superCycle <= 32'h0;
      headValid <= 1'h1;
      errorReg <= 1'h0;
    end
    else begin
      automatic logic             _GEN_31;
      automatic logic             _GEN_32 = heapSizeReg == 7'h1;
      automatic logic             _GEN_33;
      automatic logic             _GEN_34;
      automatic logic             _GEN_35;
      automatic logic [15:0][3:0] _GEN_36;
      _GEN_31 = heapSizeReg == 7'h40;
      _GEN_33 = headReg_id == io_cmd_refID;
      _GEN_34 = ~(|heapSizeReg) | _GEN_32 & headReg_id != io_cmd_refID;
      _GEN_35 =
        (rdIndexOffset ? io_rdPort_data_1_id : io_rdPort_data_0_id) == io_cmd_refID;
      _GEN_36 =
        {{stateReg},
         {stateReg},
         {stateReg},
         {stateReg},
         {_heapifier_io_control_done ? 4'h0 : 4'hB},
         {_heapifier_io_control_done ? (_GEN_30 ? 4'hB : 4'h0) : 4'hA},
         {4'hA},
         {4'h0},
         {4'hB},
         {4'h0},
         {4'h9},
         {io_srch_error ? 4'h0 : {3'h2, io_srch_done}},
         {_GEN_33 ? 4'h7 : _GEN_35 ? 4'h8 : 4'h4},
         {4'hA},
         {4'h0},
         {io_cmd_valid
            ? (io_cmd_op
                 ? (_GEN_31 ? 4'h0 : (|heapSizeReg) ? 4'h2 : 4'h1)
                 : _GEN_34 ? 4'h0 : _GEN_32 & _GEN_33 ? 4'h6 : 4'h3)
            : stateReg}};
      stateReg <= _GEN_36[stateReg];
      if (_GEN) begin
        if (_heapifier_io_headPort_write) begin
          headReg_event_superCycle <= _heapifier_io_headPort_wrData_event_superCycle;
          headReg_id <= _heapifier_io_headPort_wrData_id;
        end
        if (~io_cmd_valid | io_cmd_op | ~_GEN_34) begin
        end
        else
          removedPrio_superCycle <= 32'h0;
        headValid <= ~io_cmd_valid & ((|heapSizeReg) | headValid);
        if (io_cmd_valid) begin
          if (io_cmd_op)
            errorReg <= _GEN_31;
          else
            errorReg <= _GEN_34;
        end
      end
      else begin
        automatic logic [6:0] _incHeapsize_T;
        _incHeapsize_T = heapSizeReg + 7'h1;
        if (_GEN_4)
          heapSizeReg <= _incHeapsize_T;
        else if (_GEN_3) begin
          heapSizeReg <= _heapifier_io_control_idx_T_1;
          if (_GEN_33)
            removedPrio_superCycle <= headReg_event_superCycle;
          else if (_GEN_35) begin
            if (rdIndexOffset)
              removedPrio_superCycle <= io_rdPort_data_1_event_superCycle;
            else
              removedPrio_superCycle <= io_rdPort_data_0_event_superCycle;
          end
        end
        else if (_GEN_6) begin
          if (io_srch_error) begin
            heapSizeReg <= _incHeapsize_T;
            removedPrio_superCycle <= 32'h0;
          end
        end
        else begin
          if (_GEN_8 | ~_GEN_14) begin
          end
          else
            heapSizeReg <= _heapifier_io_control_idx_T_1;
          if (_GEN_8) begin
            if (wrIndexOffset)
              removedPrio_superCycle <= io_rdPort_data_1_event_superCycle;
            else
              removedPrio_superCycle <= io_rdPort_data_0_event_superCycle;
          end
          else if (_GEN_14)
            removedPrio_superCycle <= headReg_event_superCycle;
        end
        if (_GEN_0) begin
          headReg_event_superCycle <= io_cmd_prio_superCycle;
          headReg_id <= io_cmd_refID;
        end
        else if (_GEN_19 | ~_GEN_15) begin
          if (_heapifier_io_headPort_write) begin
            headReg_event_superCycle <= _heapifier_io_headPort_wrData_event_superCycle;
            headReg_id <= _heapifier_io_headPort_wrData_id;
          end
        end
        else if (rdIndexOffset) begin
          headReg_event_superCycle <= tempReg_1_event_superCycle;
          headReg_id <= tempReg_1_id;
        end
        else begin
          headReg_event_superCycle <= tempReg_0_event_superCycle;
          headReg_id <= tempReg_0_id;
        end
        if (_GEN_4 | ~_GEN_3) begin
        end
        else
          headValid <= ~_GEN_33;
        errorReg <= ~_GEN_7 & _GEN_6 & io_srch_error | errorReg;
      end
      if (_GEN_5 | ~_GEN_3) begin
      end
      else begin
        tempReg_0_event_superCycle <= io_rdPort_data_0_event_superCycle;
        tempReg_0_id <= io_rdPort_data_0_id;
        tempReg_1_event_superCycle <= io_rdPort_data_1_event_superCycle;
        tempReg_1_id <= io_rdPort_data_1_id;
      end
      if (_GEN | _GEN_7 | ~_GEN_6 | io_srch_error | ~io_srch_done) begin
      end
      else
        removalIndex <= io_srch_res;
    end
  end // always @(posedge)
  Heapifier heapifier (
    .clock                               (clock),
    .reset                               (reset),
    .io_control_heapifyUp
      (~_GEN_25
       & (_GEN_1 | ~(_GEN_3 | _GEN_6 | _GEN_8 | _GEN_14 | _GEN_15 | _GEN_20)
          & (_GEN_21 | _GEN_28 & ~_heapifier_io_control_done))),
    .io_control_heapifyDown
      (~(_GEN | _GEN_0 | _GEN_19)
       & (_GEN_15 | ~_GEN_27
          & (_GEN_28
               ? _heapifier_io_control_done & _GEN_30
               : stateReg == 4'hB & ~_heapifier_io_control_done))),
    .io_control_idx
      (_GEN_25
         ? heapSizeReg[5:0]
         : _GEN_1
             ? (heapSizeReg < 7'h3 ? 6'h0 : _heapifier_io_control_idx_T_1[6:1])
             : _GEN_18
                 ? heapSizeReg[5:0]
                 : _GEN_15
                     ? 6'h0
                     : _GEN_20
                         ? heapSizeReg[5:0]
                         : _GEN_21
                             ? {1'h0,
                                removalIndex < 6'h3
                                  ? 5'h0
                                  : _heapifier_io_control_idx_T_6[5:1]}
                             : _GEN_28 & _heapifier_io_control_done & _GEN_30
                                 ? removalIndex
                                 : heapSizeReg[5:0]),
    .io_control_heapSize                 (heapSizeReg),
    .io_rdPort_data_0_event_superCycle   (io_rdPort_data_0_event_superCycle),
    .io_rdPort_data_0_id                 (io_rdPort_data_0_id),
    .io_rdPort_data_1_event_superCycle   (io_rdPort_data_1_event_superCycle),
    .io_rdPort_data_1_id                 (io_rdPort_data_1_id),
    .io_headPort_rdData_event_superCycle (headReg_event_superCycle),
    .io_headPort_rdData_id               (headReg_id),
    .io_control_done                     (_heapifier_io_control_done),
    .io_control_swapped                  (_heapifier_io_control_swapped),
    .io_rdPort_address                   (_heapifier_io_rdPort_address),
    .io_wrPort_address                   (_heapifier_io_wrPort_address),
    .io_wrPort_data_0_event_superCycle   (_heapifier_io_wrPort_data_0_event_superCycle),
    .io_wrPort_data_0_id                 (_heapifier_io_wrPort_data_0_id),
    .io_wrPort_data_1_event_superCycle   (_heapifier_io_wrPort_data_1_event_superCycle),
    .io_wrPort_data_1_id                 (_heapifier_io_wrPort_data_1_id),
    .io_wrPort_write                     (_heapifier_io_wrPort_write),
    .io_headPort_wrData_event_superCycle (_heapifier_io_headPort_wrData_event_superCycle),
    .io_headPort_wrData_id               (_heapifier_io_headPort_wrData_id),
    .io_headPort_write                   (_heapifier_io_headPort_write)
  );
  assign io_head_valid = headValid;
  assign io_head_none = ~(|heapSizeReg);
  assign io_head_prio_superCycle = headReg_event_superCycle;
  assign io_head_refID = headReg_id;
  assign io_cmd_done = _GEN;
  assign io_cmd_result = errorReg;
  assign io_cmd_rm_prio_superCycle = removedPrio_superCycle;
  assign io_rdPort_address =
    _GEN | ~(_GEN_7 | ~_GEN_6) ? _rdIndexToRam_T[5:1] : _heapifier_io_rdPort_address;
  assign io_wrPort_address =
    _GEN | ~(_GEN_4 | ~(_GEN_3 | _GEN_6 | _GEN_8))
      ? _wrIndexToRam_T[5:1]
      : _heapifier_io_wrPort_address;
  assign io_wrPort_mask =
    _GEN_25
      ? 2'h3
      : _GEN_1
          ? 2'h1 << _GEN_2
          : _GEN_24
              ? 2'h3
              : _GEN_8
                  ? 2'h1 << _GEN_13
                  : _GEN_14
                      ? 2'h3
                      : _GEN_15
                          ? 2'h1 << _GEN_13
                          : _GEN_20 ? 2'h1 << _GEN_2 : _GEN_21 ? 2'h1 << _GEN_2 : 2'h3;
  assign io_wrPort_data_0_event_superCycle =
    _GEN_25
      ? _heapifier_io_wrPort_data_0_event_superCycle
      : _GEN_1
          ? (wrIndexOffset
               ? _heapifier_io_wrPort_data_0_event_superCycle
               : io_cmd_prio_superCycle)
          : _GEN_24
              ? _heapifier_io_wrPort_data_0_event_superCycle
              : _GEN_8
                  ? _GEN_9
                  : _GEN_14
                      ? _heapifier_io_wrPort_data_0_event_superCycle
                      : _GEN_15
                          ? _GEN_9
                          : _GEN_20
                              ? (wrIndexOffset
                                   ? _heapifier_io_wrPort_data_0_event_superCycle
                                   : 32'hFFFFFFFF)
                              : _GEN_23
                                  ? _GEN_16
                                  : _heapifier_io_wrPort_data_0_event_superCycle;
  assign io_wrPort_data_0_id =
    _GEN_25
      ? _heapifier_io_wrPort_data_0_id
      : _GEN_1
          ? (wrIndexOffset ? _heapifier_io_wrPort_data_0_id : io_cmd_refID)
          : _GEN_24
              ? _heapifier_io_wrPort_data_0_id
              : _GEN_8
                  ? _GEN_10
                  : _GEN_14
                      ? _heapifier_io_wrPort_data_0_id
                      : _GEN_15
                          ? _GEN_10
                          : _GEN_20
                              ? (wrIndexOffset ? _heapifier_io_wrPort_data_0_id : 7'h7F)
                              : _GEN_23 ? _GEN_17 : _heapifier_io_wrPort_data_0_id;
  assign io_wrPort_data_1_event_superCycle =
    _GEN_25
      ? _heapifier_io_wrPort_data_1_event_superCycle
      : _GEN_1
          ? (wrIndexOffset
               ? io_cmd_prio_superCycle
               : _heapifier_io_wrPort_data_1_event_superCycle)
          : _GEN_24
              ? _heapifier_io_wrPort_data_1_event_superCycle
              : _GEN_8
                  ? _GEN_11
                  : _GEN_14
                      ? _heapifier_io_wrPort_data_1_event_superCycle
                      : _GEN_15
                          ? _GEN_11
                          : _GEN_20
                              ? (wrIndexOffset
                                   ? 32'hFFFFFFFF
                                   : _heapifier_io_wrPort_data_1_event_superCycle)
                              : _GEN_26
                                  ? _GEN_16
                                  : _heapifier_io_wrPort_data_1_event_superCycle;
  assign io_wrPort_data_1_id =
    _GEN_25
      ? _heapifier_io_wrPort_data_1_id
      : _GEN_1
          ? (wrIndexOffset ? io_cmd_refID : _heapifier_io_wrPort_data_1_id)
          : _GEN_24
              ? _heapifier_io_wrPort_data_1_id
              : _GEN_8
                  ? _GEN_12
                  : _GEN_14
                      ? _heapifier_io_wrPort_data_1_id
                      : _GEN_15
                          ? _GEN_12
                          : _GEN_20
                              ? (wrIndexOffset ? 7'h7F : _heapifier_io_wrPort_data_1_id)
                              : _GEN_26 ? _GEN_17 : _heapifier_io_wrPort_data_1_id;
  assign io_wrPort_write =
    ~_GEN_25 & (_GEN_1 | ~_GEN_24 & (_GEN_8 | ~_GEN_14 & (_GEN_15 | _GEN_27)))
    | _heapifier_io_wrPort_write;
  assign io_srch_refID = io_cmd_refID;
  assign io_srch_heapSize = heapSizeReg;
  assign io_srch_search = ~_GEN_5 & (_GEN_3 | _GEN_6 & ~io_srch_error & ~io_srch_done);
endmodule

module PriorityQueue(
  input         clock,
                reset,
                io_cmd_valid,
                io_cmd_op,
  input  [31:0] io_cmd_prio_superCycle,
  input  [6:0]  io_cmd_refID,
  output        io_head_valid,
                io_head_none,
  output [31:0] io_head_prio_superCycle,
  output [6:0]  io_head_refID,
  output        io_cmd_done,
                io_cmd_result,
  output [31:0] io_cmd_rm_prio_superCycle
);

  wire        _queue_io_cmd_done;
  wire [4:0]  _queue_io_rdPort_address;
  wire [4:0]  _queue_io_wrPort_address;
  wire [1:0]  _queue_io_wrPort_mask;
  wire [31:0] _queue_io_wrPort_data_0_event_superCycle;
  wire [6:0]  _queue_io_wrPort_data_0_id;
  wire [31:0] _queue_io_wrPort_data_1_event_superCycle;
  wire [6:0]  _queue_io_wrPort_data_1_id;
  wire        _queue_io_wrPort_write;
  wire [6:0]  _queue_io_srch_refID;
  wire [6:0]  _queue_io_srch_heapSize;
  wire        _queue_io_srch_search;
  wire [31:0] _mem_rd_data_0_event_superCycle;
  wire [6:0]  _mem_rd_data_0_id;
  wire [31:0] _mem_rd_data_1_event_superCycle;
  wire [6:0]  _mem_rd_data_1_id;
  wire [5:0]  _mem_srch_res;
  wire        _mem_srch_error;
  wire        _mem_srch_done;
  linearSearchMem mem (
    .clock                      (clock),
    .reset                      (reset),
    .rd_address                 (_queue_io_rdPort_address),
    .wr_address                 (_queue_io_wrPort_address),
    .wr_mask                    (_queue_io_wrPort_mask),
    .wr_data_0_event_superCycle (_queue_io_wrPort_data_0_event_superCycle),
    .wr_data_0_id               (_queue_io_wrPort_data_0_id),
    .wr_data_1_event_superCycle (_queue_io_wrPort_data_1_event_superCycle),
    .wr_data_1_id               (_queue_io_wrPort_data_1_id),
    .wr_write                   (_queue_io_wrPort_write),
    .srch_refID                 (_queue_io_srch_refID),
    .srch_heapSize              (_queue_io_srch_heapSize),
    .srch_search                (_queue_io_srch_search),
    .rd_data_0_event_superCycle (_mem_rd_data_0_event_superCycle),
    .rd_data_0_id               (_mem_rd_data_0_id),
    .rd_data_1_event_superCycle (_mem_rd_data_1_event_superCycle),
    .rd_data_1_id               (_mem_rd_data_1_id),
    .srch_res                   (_mem_srch_res),
    .srch_error                 (_mem_srch_error),
    .srch_done                  (_mem_srch_done)
  );
  QueueControl queue (
    .clock                             (clock),
    .reset                             (reset),
    .io_cmd_valid                      (io_cmd_valid),
    .io_cmd_op                         (io_cmd_op),
    .io_cmd_prio_superCycle            (io_cmd_prio_superCycle),
    .io_cmd_refID                      (io_cmd_refID),
    .io_rdPort_data_0_event_superCycle (_mem_rd_data_0_event_superCycle),
    .io_rdPort_data_0_id               (_mem_rd_data_0_id),
    .io_rdPort_data_1_event_superCycle (_mem_rd_data_1_event_superCycle),
    .io_rdPort_data_1_id               (_mem_rd_data_1_id),
    .io_srch_res                       (_mem_srch_res),
    .io_srch_error                     (_mem_srch_error),
    .io_srch_done                      (_mem_srch_done),
    .io_head_valid                     (io_head_valid),
    .io_head_none                      (io_head_none),
    .io_head_prio_superCycle           (io_head_prio_superCycle),
    .io_head_refID                     (io_head_refID),
    .io_cmd_done                       (_queue_io_cmd_done),
    .io_cmd_result                     (io_cmd_result),
    .io_cmd_rm_prio_superCycle         (io_cmd_rm_prio_superCycle),
    .io_rdPort_address                 (_queue_io_rdPort_address),
    .io_wrPort_address                 (_queue_io_wrPort_address),
    .io_wrPort_mask                    (_queue_io_wrPort_mask),
    .io_wrPort_data_0_event_superCycle (_queue_io_wrPort_data_0_event_superCycle),
    .io_wrPort_data_0_id               (_queue_io_wrPort_data_0_id),
    .io_wrPort_data_1_event_superCycle (_queue_io_wrPort_data_1_event_superCycle),
    .io_wrPort_data_1_id               (_queue_io_wrPort_data_1_id),
    .io_wrPort_write                   (_queue_io_wrPort_write),
    .io_srch_refID                     (_queue_io_srch_refID),
    .io_srch_heapSize                  (_queue_io_srch_heapSize),
    .io_srch_search                    (_queue_io_srch_search)
  );
  assign io_cmd_done = _mem_srch_done & _queue_io_cmd_done;
endmodule

